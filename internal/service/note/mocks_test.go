// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package note is a generated GoMock package.
package note

import (
	context "context"
	reflect "reflect"

	models "github.com/Khasmag06/kode-notes/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *Mockrepository) CreateNote(ctx context.Context, userID int, note models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, userID, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockrepositoryMockRecorder) CreateNote(ctx, userID, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*Mockrepository)(nil).CreateNote), ctx, userID, note)
}

// DeleteNote mocks base method.
func (m *Mockrepository) DeleteNote(ctx context.Context, userID, noteID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, userID, noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockrepositoryMockRecorder) DeleteNote(ctx, userID, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*Mockrepository)(nil).DeleteNote), ctx, userID, noteID)
}

// GetAllNotes mocks base method.
func (m *Mockrepository) GetAllNotes(ctx context.Context, userID int) ([]models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", ctx, userID)
	ret0, _ := ret[0].([]models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockrepositoryMockRecorder) GetAllNotes(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*Mockrepository)(nil).GetAllNotes), ctx, userID)
}

// GetNote mocks base method.
func (m *Mockrepository) GetNote(ctx context.Context, userID, noteID int) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", ctx, userID, noteID)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockrepositoryMockRecorder) GetNote(ctx, userID, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*Mockrepository)(nil).GetNote), ctx, userID, noteID)
}

// UpdateNote mocks base method.
func (m *Mockrepository) UpdateNote(ctx context.Context, userID int, note models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, userID, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockrepositoryMockRecorder) UpdateNote(ctx, userID, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*Mockrepository)(nil).UpdateNote), ctx, userID, note)
}
